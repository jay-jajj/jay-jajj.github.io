<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jay-JAJJ</title>
    <link>https://jay-jajj.github.io/</link>
    
    <image>
      <url>https://www.gravatar.com/avatar/30ecd40966abff0f1553033220f45d26</url>
      <title>Jay-JAJJ</title>
      <link>https://jay-jajj.github.io/</link>
    </image>
    
    <atom:link href="https://jay-jajj.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>재쯔의 기록사이트입니다.</description>
    <pubDate>Tue, 09 Feb 2021 07:32:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>안녕하세요 여러분! (Hello guys!)</title>
      <link>https://jay-jajj.github.io/2021/02/09/hello-world/</link>
      <guid>https://jay-jajj.github.io/2021/02/09/hello-world/</guid>
      <pubDate>Tue, 09 Feb 2021 06:56:35 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;첫글입니다-👏👏👏👏&quot;&gt;&lt;a href=&quot;#첫글입니다-👏👏👏👏&quot; class=&quot;headerlink&quot; title=&quot;첫글입니다. 👏👏👏👏&quot;&gt;&lt;/a&gt;첫글입니다. 👏👏👏👏&lt;/h2&gt;&lt;p&gt;먼저 만나뵈서 반갑습니다.&lt;br&gt;저는 재쯔(jay-jajj)라고 합니다.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="첫글입니다-👏👏👏👏"><a href="#첫글입니다-👏👏👏👏" class="headerlink" title="첫글입니다. 👏👏👏👏"></a>첫글입니다. 👏👏👏👏</h2><p>먼저 만나뵈서 반갑습니다.<br>저는 재쯔(jay-jajj)라고 합니다.</p><a id="more"></a><p>기록할 사이트를 찾다가 티스토리, velog 여기저기 고민하다가<br>hexo 가 눈에띄어서 (<del>여기서부터 잘못되었지</del>) 테마도 괜찮길레 ‘가자!’ 했습니다.  </p><blockquote><p>도움을 받은 사이트<br><a href="https://kinetic.codes/2020/03/06/build-blog-with-hexo-github/">kinetic님 블로그</a></p></blockquote><p>사이트들에 포스팅 된글은 오류없이 척척 해결해 나가고 내가 겪은 에러는 찾아볼수없고 어찌 그리 다들 잘 풀리시는지…<br>눈물로 검색하며 보낸 시간들 😢😢 어찌 어찌 해결했다만 왜 되는지도 모르겠고  </p><p>hexo로 블로그를 만든다고 엄청나게 고생하고 고생하다가 어느정도 포기(?)<br>음…. 아냐<br>타협하고 글을 쓰면서 최적화를 해나가야 겠다는 생각이 들어 글을<br>쓰게 되었네요.<br>자주 들러주세요.🤗🤗🤗(<del>애드고시 통과해보게</del>)</p>]]></content:encoded>
      
      
      <category domain="https://jay-jajj.github.io/categories/other/">other</category>
      
      
      <category domain="https://jay-jajj.github.io/tags/%EC%B2%AB%EA%B8%80/">첫글</category>
      
      
      <comments>https://jay-jajj.github.io/2021/02/09/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>변수, 호이스팅, TDZ(Temporal Dead Zone)</title>
      <link>https://jay-jajj.github.io/2021/01/26/js/%EB%B3%80%EC%88%98,%20%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85,%20TDZ/</link>
      <guid>https://jay-jajj.github.io/2021/01/26/js/%EB%B3%80%EC%88%98,%20%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85,%20TDZ/</guid>
      <pubDate>Tue, 26 Jan 2021 06:08:37 GMT</pubDate>
      
      <description>&lt;h2 id=&quot;변태수-죄송합니다&quot;&gt;&lt;a href=&quot;#변태수-죄송합니다&quot; class=&quot;headerlink&quot; title=&quot;변태수 (죄송합니다.)&quot;&gt;&lt;/a&gt;변&lt;del&gt;태&lt;/del&gt;수 (죄송합니다.)&lt;/h2&gt;&lt;p&gt;변수는 다들 알겠지만 변하는 수를 말하죠.&lt;br&gt;뭔소리야&lt;br&gt;싶으시겠지만…&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="변태수-죄송합니다"><a href="#변태수-죄송합니다" class="headerlink" title="변태수 (죄송합니다.)"></a>변<del>태</del>수 (죄송합니다.)</h2><p>변수는 다들 알겠지만 변하는 수를 말하죠.<br>뭔소리야<br>싶으시겠지만…</p><a id="more"></a><p> 수학에서의 x y 와 거의 같습니다.<br>프로그래밍에서의 변수는 값을 저장할수있습니다.<br>자바스크립트에서는 변수의 종류가 3가지가 존재합니다.<br>let, const, var입니다.<br>이 중 var는 오래된 문법으로 현재는 쓰기를 지향하지 않습니다.<br>let 과 const는 es6에서 추가된 개념으로 쫌 더 쌔거란 거죠.<br>var와 최근 추가된 let, const의 차이점을 설명 드리겠습니다.<br>var는 중복해서 선언이 가능합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> talk = <span class="string">&quot;철수야&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(talk);</span><br><span class="line"><span class="keyword">var</span> talk = <span class="string">&quot;왜불러&quot;</span>;</span><br><span class="line"><span class="comment">// 에러없음</span></span><br></pre></td></tr></table></figure><p>하지만 let은 불가능 해요. 래퍼런스 에러가 딱 뜹니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> talk = <span class="string">&quot;철수야&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(talk);</span><br><span class="line"><span class="keyword">let</span> talk = <span class="string">&quot;시끄러&quot;</span>;</span><br><span class="line"><span class="comment">// Error</span></span><br></pre></td></tr></table></figure><p>또 var는 선언전에 사용이 가능합니다. 변수가 최상위에 선언된것 처럼 됩니다. 이런걸 호이스팅이라고 하죠. 하지만 변수명은 호이스팅 되지만 값 즉 할당은 호이스팅 되지않기 때문에 값이 undefined가 됩니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;앨런 튜닝&#x27;</span>;</span><br><span class="line"><span class="comment">/*-----------밑에 처럼 됩니다.-------------*/</span></span><br><span class="line"><span class="keyword">var</span> name;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">//undefined</span></span><br><span class="line">name = <span class="string">&#x27;앨런 튜닝&#x27;</span>; </span><br></pre></td></tr></table></figure><p>갑자기 호이스팅이라는 전문용어 딱 올라오니까 벌써 머리 아프죠.<br>호이스팅의 설명을 들고 오자면.</p><blockquote><p>호이스팅(hoisting) : 스코프 내부 어디서든 변수가 최상위에 선언된것 처럼 행동 하는것</p></blockquote><p>을 말합니다.<br>let과 const는 선언전에 사용하려면 하면 래퍼런스 에러가 반겨줍니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 콘솔 : Reference Error야 헤헷</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;폰 노이천&quot;</span>;</span><br></pre></td></tr></table></figure><p>그럼 let과 const는 호이스팅이 안되냐? 그건 아닙니다.<br>let과 const 또한 호이스팅 잘 됩니다. 에러가 나는 이유는 TDZ(tempral dead zone) 때문이죠.<br>let과 const는 tdz영향을 받습니다. tdz 영역에 있는 변수는 사용을 못해요.<br>이 영역에서 열심히 써봤자 에러가 난다는 거죠.<br>쉽게 예시를 보면</p><pre><code class="js">/* ---tempral dead zone-- */console.log(name); //error/* ---tempral dead zone-- */let name = &quot;앨런 튜닝&quot;//이 밑으론 써도 된다는 거죠console.log(name); // console : &#39;앨런튜닝&#39;</code></pre><p>요렇게 됩니다.<br>할당을 하기전에는 사용을 할수가 없습니다. 그렇기 때문에 잠재적인 버그를 줄여주고 예측가능하게 해준다 그말입니다. </p><p>변수는 3단계 생성과정을 거칩니다.</p><ol><li>선언 단계</li><li>할당 단계</li><li>초기화 단계</li></ol><p>var는 선언과 할당이 동시에 일어납니다.</p><ol><li><p>선언 및 초기화 단계</p></li><li><p>할당 단계</p><p>여기 서 초기화란</p><blockquote><p>초기화 : undefined를 할당해주는 단계</p></blockquote><p>를 말합니다.  </p></li></ol><p>let은 선언단계와 초기화 단계가 분리되서 진행이 됩니다.<br> 난 저 고리타분한 var와는 다르다 그말이죠.</p><ol><li>선언 단계</li><li>초기화 단계 </li><li>할당 단계<br>선언은 호이스팅 되지만 초기화 단계가 실제 코드에 도달</li></ol>]]></content:encoded>
      
      
      <category domain="https://jay-jajj.github.io/categories/programming/">programming</category>
      
      <category domain="https://jay-jajj.github.io/categories/programming/JS/">JS</category>
      
      
      <category domain="https://jay-jajj.github.io/tags/%EB%B3%80%EC%88%98/">변수</category>
      
      <category domain="https://jay-jajj.github.io/tags/hoisting/">hoisting</category>
      
      <category domain="https://jay-jajj.github.io/tags/tdz/">tdz</category>
      
      <category domain="https://jay-jajj.github.io/tags/es6/">es6</category>
      
      
      <comments>https://jay-jajj.github.io/2021/01/26/js/%EB%B3%80%EC%88%98,%20%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85,%20TDZ/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
